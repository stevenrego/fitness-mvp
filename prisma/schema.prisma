// ====================
// GENERATOR & DATASOURCE
// ====================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================
// ENUMS
// ====================
enum Role {
  USER
  COACH
  ADMIN
  DIETICIAN
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

// ====================
// MODELS
// ====================
model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String
  name                String?
  gender              String?
  dob                 DateTime?
  height              Float?
  weight              Float?
  goal                String?
  role               Role[]               @default([USER])
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  coach               CoachProfile?        @relation("CoachOwner")
  assignedCoach       CoachProfile?        @relation("CoachClients", fields: [assignedCoachId], references: [id])
  assignedCoachId     String?
  coachProfile    CoachProfile?   @relation(fields: [coachProfileId], references: [id]) 
  coachProfile CoachProfile?  @relation("CoachOwner")
  coachProfileId  String?         // This links to CoachProfile
  sessions            WorkoutSession[]
  workoutTemplates WorkoutTemplate[]  // ðŸ‘ˆ Add this
  subscription        Subscription?
  notifications       Notification[]
  posts               Post[]
  comments            Comment[]
  messagesSent        Message[]            @relation("SentMessages")
  messagesReceived    Message[]            @relation("ReceivedMessages")
  pointTxns           PointTransaction[]
  orders              ShopOrder[]
  challenges          ChallengeParticipant[]
  planProgress        PlanEnrollment[]
  dailyLogs           DailyLog[]
  achievements        Achievement[]
  transactions        Transaction[]
  nutritionEntries    NutritionEntry[]
  habits              Habit[]
  habitLogs           HabitLog[]
  gym                 Gym?                 @relation(fields: [gymId], references: [id])
  gymId               String?
  dieticianProfile    DieticianProfile?    @relation("DieticianOwner")
  assignedDietician   DieticianProfile?    @relation("DieticianClients", fields: [assignedDieticianId], references: [id])
  assignedDieticianId String?

  
}

model CoachProfile {
  id           String        @id @default(cuid())
  user         User          @relation("CoachOwner", fields: [userId], references: [id])
  userId       String        @unique
  clients      User[]        @relation("CoachClients")
  expertise    String?
  experience   Int?
  bio          String?
  certifications String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  workoutPlans WorkoutPlan[]
}

model DieticianProfile {
  id           String   @id @default(cuid())
  user         User     @relation("DieticianOwner", fields: [userId], references: [id])
  userId       String   @unique
  clients      User[]   @relation("DieticianClients")
  specialty    String?
  license      String?
  bio          String?   // âœ… add this line to match your seed.ts
  expertise    String?   // âœ… optional: since seed.ts uses it too
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  mealPlans    MealPlan[]
}


model WorkoutTemplate {
  id        String                @id @default(cuid())
  name      String                // âœ… Add this
  notes     String?               // âœ… Add this
  user      User                  @relation(fields: [userId], references: [id])
  userId    String
  items     WorkoutTemplateItem[]

}

model WorkoutTemplateItem {
  id                String           @id @default(cuid())
  template          WorkoutTemplate  @relation(fields: [templateId], references: [id])
  templateId        String
  exercise          Exercise         @relation(fields: [exerciseId], references: [id])
  exerciseId        String
  order             Int?
  notes             String?
}

model WorkoutPlan {
  id          String           @id @default(cuid())
  title       String
  description String?
  level       String?
  duration    Int?
  price       Float?
  visibility  String?
  createdAt   DateTime         @default(now())
  coach       CoachProfile?    @relation(fields: [coachId], references: [id])
  coachId     String?
  days        WorkoutDay[]
  enrollments PlanEnrollment[]
}

model WorkoutDay {
  id        String      @id @default(cuid())
  plan      WorkoutPlan @relation(fields: [planId], references: [id])
  planId    String
  dayNumber Int
  exercises Exercise[]  @relation("WorkoutDayExercises")
}

model Exercise {
  id           String        @id @default(cuid())
  name         String
  description  String?
  category     String?
  muscleGroup  String?
  videoUrl     String?
  equipment    String?
  defaultSets  Int?
  templateItems WorkoutTemplateItem[]  // ðŸ‘ˆ Add this
  defaultReps  Int?
  workoutDays  WorkoutDay[]  @relation("WorkoutDayExercises")
}

model MealPlan {
  id          String            @id @default(cuid())
  title       String
  coach       DieticianProfile? @relation(fields: [coachId], references: [id])
  coachId     String?
  calories    Float?
  macros      String?
  description String?
  meals       Meal[]
}

model Meal {
  id         String      @id @default(cuid())
  name       String
  mealPlan   MealPlan    @relation(fields: [mealPlanId], references: [id])
  mealPlanId String
  mealType   MealType
  foodItems  FoodItem[]  @relation("MealFoodItems")
}

model FoodItem {
  id          String     @id @default(cuid())
  name        String
  calories    Float
  carbs       Float
  protein     Float
  fat         Float
  imageUrl    String?
  barcode     String?
  portionSize String?
  meals       Meal[]     @relation("MealFoodItems")
}

model Subscription {
  id        String               @id @default(cuid())
  user      User                 @relation(fields: [userId], references: [id])
  userId    String               @unique
  type      String
  status    SubscriptionStatus
  startDate DateTime
  endDate   DateTime
  gateway   String?
  txnId     String?
}

model Transaction {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Float
  type      String
  status    String
  provider  String
  timestamp DateTime @default(now())
}

model Challenge {
  id           String                 @id @default(cuid())
  title        String
  type         String
  startDate    DateTime
  endDate      DateTime
  criteria     String?
  adminId      String?
  status       String?
  participants ChallengeParticipant[]
}

model ChallengeParticipant {
  id              String    @id @default(cuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  challenge       Challenge @relation(fields: [challengeId], references: [id])
  challengeId     String
  progress        String?
  proofImage      String?
  verified        Boolean?
  rejectionReason String?
}

model Post {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  text      String?
  mediaUrl  String?
  type      String?
  createdAt DateTime   @default(now())
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  text      String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Message {
  id         String   @id @default(cuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  content    String
  timestamp  DateTime @default(now())
}

model PlanEnrollment {
  id           String       @id @default(cuid())
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  workoutPlan  WorkoutPlan  @relation(fields: [planId], references: [id])
  planId       String
  progress     String?
  startDate    DateTime?
  status       String?
}

model DailyLog {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  date         DateTime
  notes        String?
  achievements Achievement[]
}

model Achievement {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  type      String
  badge     String?
  date      DateTime
  log       DailyLog? @relation(fields: [logId], references: [id])
  logId     String?
}


enum PointTxnType {
  EARN
  REDEEM
}

model PointTransaction {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  points    Int
  reason    String
  type      PointTxnType  // âœ… now typed!
  createdAt DateTime @default(now())
}


model Reward {
  id          String      @id @default(cuid())
  title       String
  type        String
  cost        Int
  inventory   Int?
  image       String?
  description String?
  orders      ShopOrder[]
}

model ShopOrder {
  id         String     @id @default(cuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  reward     Reward     @relation(fields: [rewardId], references: [id])
  rewardId   String
  status     OrderStatus
  redeemedAt DateTime?
}

model Gym {
  id         String   @id @default(cuid())
  name       String
  address    String
  status     String?
  addedBy    String?
  approvedBy String?
  members    User[]
}

model WorkoutSession {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  startedAt DateTime?
  endedAt   DateTime?
  duration  Int?
  notes     String?
  sets      Set[]     @relation("SessionSets")
  createdAt DateTime  @default(now())
}

model Set {
  id                String          @id @default(uuid())
  reps              Int
  weight            Float?
  workoutSessionId  String
  workoutSession    WorkoutSession  @relation("SessionSets", fields: [workoutSessionId], references: [id])
}

model NutritionEntry {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  calories  Int
  date      DateTime @default(now())
}

model Habit {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  title     String
  frequency String?
  completed Boolean    @default(false)
  createdAt DateTime   @default(now())
  logs      HabitLog[]
}

model HabitLog {
  id        String   @id @default(cuid())
  habit     Habit    @relation(fields: [habitId], references: [id])
  habitId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime @default(now())
  status    String
}
